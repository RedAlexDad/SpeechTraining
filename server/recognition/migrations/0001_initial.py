# Generated by Django 3.2.15 on 2024-04-06 12:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('WER', models.TextField(verbose_name='WER')),
                ('CER', models.TextField(verbose_name='CER')),
                ('MER', models.TextField(verbose_name='MER')),
                ('WIL', models.TextField(verbose_name='WIL')),
                ('IWER', models.TextField(verbose_name='IWER')),
            ],
            options={
                'verbose_name': 'Метрика',
                'db_table': 'metric',
            },
        ),
        migrations.CreateModel(
            name='RecognitionData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Текст')),
                ('transcription_text', models.TextField(verbose_name='Текст транскрибации')),
                ('date_recoding', models.DateField(null=True, verbose_name='Дата записи')),
                ('id_metric', models.IntegerField(null=True, verbose_name='ID метрики')),
                ('id_client', models.IntegerField(null=True, verbose_name='ID клиента')),
                ('id_recommendation', models.IntegerField(null=True, verbose_name='ID рекомендации')),
                ('data_recognition', models.CharField(max_length=255, verbose_name='Данные распознавания')),
            ],
            options={
                'verbose_name': 'Данные',
                'db_table': 'recognition_data',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('id_logodedist', models.IntegerField(verbose_name='ID логопеда')),
                ('recommendation_type', models.TextField(verbose_name='Тип рекомендации')),
                ('recommendation_text_by_llm', models.TextField(verbose_name='Текст рекомендации (LLM)')),
                ('recommendation_text_by_logopedist', models.TextField(verbose_name='Текст рекомендации (логопед)')),
                ('date_recommendation', models.DateField(null=True, verbose_name='Дата рекомендации')),
            ],
            options={
                'verbose_name': 'Рекомендация',
                'db_table': 'recommendation',
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='Никнейм')),
                ('password', models.CharField(max_length=255, verbose_name='Пароль')),
                ('is_moderator', models.BooleanField(default=False, verbose_name='Является ли пользователь логопедом?')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('name', models.TextField(verbose_name='Имя')),
                ('lastname', models.TextField(verbose_name='Фамилия')),
                ('fathername', models.TextField(verbose_name='Отчество')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'db_table': 'account',
            },
        ),
    ]
